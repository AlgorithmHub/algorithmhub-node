/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body3', 'model/InlineResponse20014'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body3'), require('../model/InlineResponse20014'));
  } else {
    // Browser globals (root is window)
    if (!root.algorithmhub) {
      root.algorithmhub = {};
    }
    root.algorithmhub.ComputeApi = factory(root.algorithmhub.ApiClient, root.algorithmhub.Body3, root.algorithmhub.InlineResponse20014);
  }
}(this, function(ApiClient, Body3, InlineResponse20014) {
  'use strict';

  /**
   * Compute service.
   * @module api/ComputeApi
   * @version 0.3.0
   */

  /**
   * Constructs a new ComputeApi. 
   * @alias module:api/ComputeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates new compute
     * Creates a new compute
     * @param {module:model/Body3} body The compute parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    this.createComputeWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCompute");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/compute', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates new compute
     * Creates a new compute
     * @param {module:model/Body3} body The compute parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    this.createCompute = function(body) {
      return this.createComputeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing compute
     * Delete an existing compute
     * @param {String} cnid The compute id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    this.deleteComputeWithHttpInfo = function(cnid) {
      var postBody = null;

      // verify the required parameter 'cnid' is set
      if (cnid === undefined || cnid === null) {
        throw new Error("Missing the required parameter 'cnid' when calling deleteCompute");
      }


      var pathParams = {
        'cnid': cnid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/compute/{cnid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing compute
     * Delete an existing compute
     * @param {String} cnid The compute id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    this.deleteCompute = function(cnid) {
      return this.deleteComputeWithHttpInfo(cnid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets compute metadata
     * Gets compute metadata
     * @param {String} cnid The compute id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    this.detailComputeWithHttpInfo = function(cnid) {
      var postBody = null;

      // verify the required parameter 'cnid' is set
      if (cnid === undefined || cnid === null) {
        throw new Error("Missing the required parameter 'cnid' when calling detailCompute");
      }


      var pathParams = {
        'cnid': cnid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/compute/{cnid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets compute metadata
     * Gets compute metadata
     * @param {String} cnid The compute id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    this.detailCompute = function(cnid) {
      return this.detailComputeWithHttpInfo(cnid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of compute resources
     * Returns a list of compute resources
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20014>} and HTTP response
     */
    this.listComputeWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse20014];

      return this.apiClient.callApi(
        '/compute', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns list of compute resources
     * Returns a list of compute resources
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20014>}
     */
    this.listCompute = function() {
      return this.listComputeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));

/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20016', 'model/InlineResponse20017', 'model/InlineResponseDefault'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20016'), require('../model/InlineResponse20017'), require('../model/InlineResponseDefault'));
  } else {
    // Browser globals (root is window)
    if (!root.algorithmhub) {
      root.algorithmhub = {};
    }
    root.algorithmhub.UnitTestsApi = factory(root.algorithmhub.ApiClient, root.algorithmhub.InlineResponse20016, root.algorithmhub.InlineResponse20017, root.algorithmhub.InlineResponseDefault);
  }
}(this, function(ApiClient, InlineResponse20016, InlineResponse20017, InlineResponseDefault) {
  'use strict';

  /**
   * UnitTests service.
   * @module api/UnitTestsApi
   * @version 0.3.1
   */

  /**
   * Constructs a new UnitTestsApi. 
   * @alias module:api/UnitTestsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create new spec test
     * Create new spec test
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.createTestWithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling createTest");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/model/{mid}/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create new spec test
     * Create new spec test
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.createTest = function(mid) {
      return this.createTestWithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a spec test
     * Delete a spec test
     * @param {String} mid The model id
     * @param {String} tid The test id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.deleteTestWithHttpInfo = function(mid, tid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling deleteTest");
      }

      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling deleteTest");
      }


      var pathParams = {
        'mid': mid,
        'tid': tid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/model/{mid}/test/{tid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a spec test
     * Delete a spec test
     * @param {String} mid The model id
     * @param {String} tid The test id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.deleteTest = function(mid, tid) {
      return this.deleteTestWithHttpInfo(mid, tid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List spec tests
     * List spec tests
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.listTestWithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling listTest");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/model/{mid}/test', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List spec tests
     * List spec tests
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.listTest = function(mid) {
      return this.listTestWithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check for keyboard interrupt
     * Check for keyboard interrupt during run
     * @param {String} rid The run id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.runKeyboardInterruptWithHttpInfo = function(rid) {
      var postBody = null;

      // verify the required parameter 'rid' is set
      if (rid === undefined || rid === null) {
        throw new Error("Missing the required parameter 'rid' when calling runKeyboardInterrupt");
      }


      var pathParams = {
        'rid': rid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/run/{rid}/test/keyboardInterrupt', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check for keyboard interrupt
     * Check for keyboard interrupt during run
     * @param {String} rid The run id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.runKeyboardInterrupt = function(rid) {
      return this.runKeyboardInterruptWithHttpInfo(rid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check for runtime error
     * Check for any error that occurs during run
     * @param {String} rid The run id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.runRuntimeErrorWithHttpInfo = function(rid) {
      var postBody = null;

      // verify the required parameter 'rid' is set
      if (rid === undefined || rid === null) {
        throw new Error("Missing the required parameter 'rid' when calling runRuntimeError");
      }


      var pathParams = {
        'rid': rid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/run/{rid}/test/runtimeError', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check for runtime error
     * Check for any error that occurs during run
     * @param {String} rid The run id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.runRuntimeError = function(rid) {
      return this.runRuntimeErrorWithHttpInfo(rid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run the tests
     * Run the tests
     * @param {String} mid The model id
     * @param {String} tid The test id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.runTestWithHttpInfo = function(mid, tid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling runTest");
      }

      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling runTest");
      }


      var pathParams = {
        'mid': mid,
        'tid': tid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/model/{mid}/test/{tid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Run the tests
     * Run the tests
     * @param {String} mid The model id
     * @param {String} tid The test id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.runTest = function(mid, tid) {
      return this.runTestWithHttpInfo(mid, tid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a spec test
     * Update a spec test
     * @param {String} mid The model id
     * @param {String} tid The test id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.updateTestWithHttpInfo = function(mid, tid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling updateTest");
      }

      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling updateTest");
      }


      var pathParams = {
        'mid': mid,
        'tid': tid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/model/{mid}/test/{tid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a spec test
     * Update a spec test
     * @param {String} mid The model id
     * @param {String} tid The test id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.updateTest = function(mid, tid) {
      return this.updateTestWithHttpInfo(mid, tid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Checks valid data set
     * Checking for valid data set
     * @param {String} did The dataset id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response
     */
    this.validateDataWithHttpInfo = function(did) {
      var postBody = null;

      // verify the required parameter 'did' is set
      if (did === undefined || did === null) {
        throw new Error("Missing the required parameter 'did' when calling validateData");
      }


      var pathParams = {
        'did': did
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/data/{did}/test/validate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Checks valid data set
     * Checking for valid data set
     * @param {String} did The dataset id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}
     */
    this.validateData = function(did) {
      return this.validateDataWithHttpInfo(did)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Runs the unit test cases
     * Runs the unit test cases specified for model
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.validateModelWithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling validateModel");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/model/{mid}/test/validate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Runs the unit test cases
     * Runs the unit test cases specified for model
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.validateModel = function(mid) {
      return this.validateModelWithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Runs the unit test cases
     * Runs the unit test cases specified for Run
     * @param {String} rid The run id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    this.validateRunWithHttpInfo = function(rid) {
      var postBody = null;

      // verify the required parameter 'rid' is set
      if (rid === undefined || rid === null) {
        throw new Error("Missing the required parameter 'rid' when calling validateRun");
      }


      var pathParams = {
        'rid': rid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/run/{rid}/test/validate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Runs the unit test cases
     * Runs the unit test cases specified for Run
     * @param {String} rid The run id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    this.validateRun = function(rid) {
      return this.validateRunWithHttpInfo(rid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));

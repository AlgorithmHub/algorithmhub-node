/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20012', 'model/InlineResponse20013', 'model/InlineResponseDefault'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20012'), require('../model/InlineResponse20013'), require('../model/InlineResponseDefault'));
  } else {
    // Browser globals (root is window)
    if (!root.algorithmhub) {
      root.algorithmhub = {};
    }
    root.algorithmhub.DataApi = factory(root.algorithmhub.ApiClient, root.algorithmhub.InlineResponse20012, root.algorithmhub.InlineResponse20013, root.algorithmhub.InlineResponseDefault);
  }
}(this, function(ApiClient, InlineResponse20012, InlineResponse20013, InlineResponseDefault) {
  'use strict';

  /**
   * Data service.
   * @module api/DataApi
   * @version 0.3.0
   */

  /**
   * Constructs a new DataApi. 
   * @alias module:api/DataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes the data object
     * Deletes the data object
     * @param {String} did The data id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteDataWithHttpInfo = function(did) {
      var postBody = null;

      // verify the required parameter 'did' is set
      if (did === undefined || did === null) {
        throw new Error("Missing the required parameter 'did' when calling deleteData");
      }


      var pathParams = {
        'did': did
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/data/{did}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the data object
     * Deletes the data object
     * @param {String} did The data id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteData = function(did) {
      return this.deleteDataWithHttpInfo(did)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the data object
     * Get the data object as a file
     * @param {String} did The data id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    this.downloadDataWithHttpInfo = function(did) {
      var postBody = null;

      // verify the required parameter 'did' is set
      if (did === undefined || did === null) {
        throw new Error("Missing the required parameter 'did' when calling downloadData");
      }


      var pathParams = {
        'did': did
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = File;

      return this.apiClient.callApi(
        '/data/{did}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the data object
     * Get the data object as a file
     * @param {String} did The data id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    this.downloadData = function(did) {
      return this.downloadDataWithHttpInfo(did)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information on the data
     * Get information on the data object
     * @param {String} did The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    this.getDataWithHttpInfo = function(did) {
      var postBody = null;

      // verify the required parameter 'did' is set
      if (did === undefined || did === null) {
        throw new Error("Missing the required parameter 'did' when calling getData");
      }


      var pathParams = {
        'did': did
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/data/{did}/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get information on the data
     * Get information on the data object
     * @param {String} did The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}
     */
    this.getData = function(did) {
      return this.getDataWithHttpInfo(did)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a list of data
     * Return a list data objects owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20012>} and HTTP response
     */
    this.listDataWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse20012];

      return this.apiClient.callApi(
        '/data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return a list of data
     * Return a list data objects owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20012>}
     */
    this.listData = function() {
      return this.listDataWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload data
     * Upload a data file and get data id
     * @param {File} file The file to upload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response
     */
    this.uploadDataWithHttpInfo = function(file) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadData");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = [];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload data
     * Upload a data file and get data id
     * @param {File} file The file to upload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}
     */
    this.uploadData = function(file) {
      return this.uploadDataWithHttpInfo(file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));

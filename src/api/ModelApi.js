/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Body1', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponseDefault', 'model/ModelName', 'model/ModelName1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponseDefault'), require('../model/ModelName'), require('../model/ModelName1'));
  } else {
    // Browser globals (root is window)
    if (!root.algorithmhub) {
      root.algorithmhub = {};
    }
    root.algorithmhub.ModelApi = factory(root.algorithmhub.ApiClient, root.algorithmhub.Body, root.algorithmhub.Body1, root.algorithmhub.InlineResponse200, root.algorithmhub.InlineResponse2001, root.algorithmhub.InlineResponse2002, root.algorithmhub.InlineResponse2003, root.algorithmhub.InlineResponseDefault, root.algorithmhub.ModelName, root.algorithmhub.ModelName1);
  }
}(this, function(ApiClient, Body, Body1, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003, InlineResponseDefault, ModelName, ModelName1) {
  'use strict';

  /**
   * Model service.
   * @module api/ModelApi
   * @version 0.3.0
   */

  /**
   * Constructs a new ModelApi. 
   * @alias module:api/ModelApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new model
     * Create a new model
     * @param {module:model/ModelName} modelName The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.createModelWithHttpInfo = function(modelName) {
      var postBody = modelName;

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling createModel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/model', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new model
     * Create a new model
     * @param {module:model/ModelName} modelName The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.createModel = function(modelName) {
      return this.createModelWithHttpInfo(modelName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new model
     * Create a new model
     * @param {module:model/ModelName1} modelName The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.createModel_0WithHttpInfo = function(modelName) {
      var postBody = modelName;

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling createModel_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/service', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new model
     * Create a new model
     * @param {module:model/ModelName1} modelName The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.createModel_0 = function(modelName) {
      return this.createModel_0WithHttpInfo(modelName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} mid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    this.deleteModelWithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling deleteModel");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/model/{mid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} mid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    this.deleteModel = function(mid) {
      return this.deleteModelWithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete trained model
     * Deletes a single trained model based on the ID supplied
     * @param {String} mid Deletes the trained model based on the model id provided
     * @param {String} trid Deletes the trained model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.deleteModelTrainWithHttpInfo = function(mid, trid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling deleteModelTrain");
      }

      // verify the required parameter 'trid' is set
      if (trid === undefined || trid === null) {
        throw new Error("Missing the required parameter 'trid' when calling deleteModelTrain");
      }


      var pathParams = {
        'mid': mid,
        'trid': trid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/model/{mid}/train/{trid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete trained model
     * Deletes a single trained model based on the ID supplied
     * @param {String} mid Deletes the trained model based on the model id provided
     * @param {String} trid Deletes the trained model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.deleteModelTrain = function(mid, trid) {
      return this.deleteModelTrainWithHttpInfo(mid, trid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} mid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    this.deleteModel_0WithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling deleteModel_0");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/service/{mid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} mid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    this.deleteModel_0 = function(mid) {
      return this.deleteModel_0WithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    this.detailModelWithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling detailModel");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/model/{mid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    this.detailModel = function(mid) {
      return this.detailModelWithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    this.detailModel_0WithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling detailModel_0");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/service/{mid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    this.detailModel_0 = function(mid) {
      return this.detailModel_0WithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a model
     * Edit an existing model
     * @param {String} mid The model id that needs to be edited
     * @param {module:model/Body} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.editModelWithHttpInfo = function(mid, body) {
      var postBody = body;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling editModel");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editModel");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/model/{mid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit a model
     * Edit an existing model
     * @param {String} mid The model id that needs to be edited
     * @param {module:model/Body} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.editModel = function(mid, body) {
      return this.editModelWithHttpInfo(mid, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a trained model
     * Edit or update an existing training
     * @param {String} mid The model id
     * @param {String} trid The train id that needs to be edited
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.editModelTrainWithHttpInfo = function(mid, trid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling editModelTrain");
      }

      // verify the required parameter 'trid' is set
      if (trid === undefined || trid === null) {
        throw new Error("Missing the required parameter 'trid' when calling editModelTrain");
      }


      var pathParams = {
        'mid': mid,
        'trid': trid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/model/{mid}/train/{trid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit a trained model
     * Edit or update an existing training
     * @param {String} mid The model id
     * @param {String} trid The train id that needs to be edited
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.editModelTrain = function(mid, trid) {
      return this.editModelTrainWithHttpInfo(mid, trid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a model
     * Edit an existing model
     * @param {String} mid The model id that needs to be edited
     * @param {module:model/Body1} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.editModel_0WithHttpInfo = function(mid, body) {
      var postBody = body;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling editModel_0");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editModel_0");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/service/{mid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit a model
     * Edit an existing model
     * @param {String} mid The model id that needs to be edited
     * @param {module:model/Body1} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.editModel_0 = function(mid, body) {
      return this.editModel_0WithHttpInfo(mid, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fit the model
     * Fit the model with the data
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.fitModelTrainWithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling fitModelTrain");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/model/{mid}/train', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fit the model
     * Fit the model with the data
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.fitModelTrain = function(mid) {
      return this.fitModelTrainWithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List out trained models
     * List out all the trained models
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.listModelTrainWithHttpInfo = function(mid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling listModelTrain");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/model/{mid}/train', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List out trained models
     * List out all the trained models
     * @param {String} mid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.listModelTrain = function(mid) {
      return this.listModelTrainWithHttpInfo(mid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.listModelsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/model', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.listModels = function() {
      return this.listModelsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.listModels_0WithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/service', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.listModels_0 = function() {
      return this.listModels_0WithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a model
     * Run an existing model
     * @param {String} mid The model id to run
     * @param {Array.<module:model/ERRORUNKNOWN>} input Input into the model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.runModelWithHttpInfo = function(mid, input) {
      var postBody = input;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling runModel");
      }

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling runModel");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/model/{mid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Run a model
     * Run an existing model
     * @param {String} mid The model id to run
     * @param {Array.<module:model/ERRORUNKNOWN>} input Input into the model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.runModel = function(mid, input) {
      return this.runModelWithHttpInfo(mid, input)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a training
     * Run an specific training
     * @param {String} mid The model id to train
     * @param {String} trid The training id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.runModelTrainWithHttpInfo = function(mid, trid) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling runModelTrain");
      }

      // verify the required parameter 'trid' is set
      if (trid === undefined || trid === null) {
        throw new Error("Missing the required parameter 'trid' when calling runModelTrain");
      }


      var pathParams = {
        'mid': mid,
        'trid': trid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/model/{mid}/train/{trid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Run a training
     * Run an specific training
     * @param {String} mid The model id to train
     * @param {String} trid The training id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.runModelTrain = function(mid, trid) {
      return this.runModelTrainWithHttpInfo(mid, trid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a model
     * Run an existing model
     * @param {String} mid The model id to run
     * @param {Array.<module:model/ERRORUNKNOWN>} input Input into the model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.runModel_0WithHttpInfo = function(mid, input) {
      var postBody = input;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling runModel_0");
      }

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling runModel_0");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/service/{mid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Run a model
     * Run an existing model
     * @param {String} mid The model id to run
     * @param {Array.<module:model/ERRORUNKNOWN>} input Input into the model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.runModel_0 = function(mid, input) {
      return this.runModel_0WithHttpInfo(mid, input)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));

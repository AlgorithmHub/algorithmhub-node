/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Body1', 'model/Body2', 'model/Body3', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponseDefault'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/Body2'), require('../model/Body3'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponseDefault'));
  } else {
    // Browser globals (root is window)
    if (!root.algorithmhub) {
      root.algorithmhub = {};
    }
    root.algorithmhub.ModelApi = factory(root.algorithmhub.ApiClient, root.algorithmhub.Body, root.algorithmhub.Body1, root.algorithmhub.Body2, root.algorithmhub.Body3, root.algorithmhub.InlineResponse200, root.algorithmhub.InlineResponse2001, root.algorithmhub.InlineResponseDefault);
  }
}(this, function(ApiClient, Body, Body1, Body2, Body3, InlineResponse200, InlineResponse2001, InlineResponseDefault) {
  'use strict';

  /**
   * Model service.
   * @module api/ModelApi
   * @version 0.2.3
   */

  /**
   * Constructs a new ModelApi. 
   * @alias module:api/ModelApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new model
     * Create a new model
     * @param {module:model/Body} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.createModelWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createModel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new model
     * Create a new model
     * @param {module:model/Body} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.createModel = function(body) {
      return this.createModelWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new model
     * Create a new model
     * @param {module:model/Body2} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.createModel_0WithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createModel_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new model
     * Create a new model
     * @param {module:model/Body2} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.createModel_0 = function(body) {
      return this.createModel_0WithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} sid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.deleteModelWithHttpInfo = function(sid) {
      var postBody = null;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteModel");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/model/{sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} sid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.deleteModel = function(sid) {
      return this.deleteModelWithHttpInfo(sid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} sid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.deleteModel_0WithHttpInfo = function(sid) {
      var postBody = null;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteModel_0");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/service/{sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete details of model
     * Deletes a single model based on the ID supplied
     * @param {String} sid Deletes the model based on the model id provided
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.deleteModel_0 = function(sid) {
      return this.deleteModel_0WithHttpInfo(sid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} sid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.detailModelWithHttpInfo = function(sid) {
      var postBody = null;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling detailModel");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/model/{sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} sid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.detailModel = function(sid) {
      return this.detailModelWithHttpInfo(sid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} sid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.detailModel_0WithHttpInfo = function(sid) {
      var postBody = null;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling detailModel_0");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/service/{sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of model
     * Get details for an existing model
     * @param {String} sid The model id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.detailModel_0 = function(sid) {
      return this.detailModel_0WithHttpInfo(sid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a model
     * Edit an existing model
     * @param {String} sid The model id that needs to be edited
     * @param {module:model/Body1} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.editModelWithHttpInfo = function(sid, body) {
      var postBody = body;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling editModel");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editModel");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/model/{sid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit a model
     * Edit an existing model
     * @param {String} sid The model id that needs to be edited
     * @param {module:model/Body1} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.editModel = function(sid, body) {
      return this.editModelWithHttpInfo(sid, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a model
     * Edit an existing model
     * @param {String} sid The model id that needs to be edited
     * @param {module:model/Body3} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.editModel_0WithHttpInfo = function(sid, body) {
      var postBody = body;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling editModel_0");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editModel_0");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/service/{sid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit a model
     * Edit an existing model
     * @param {String} sid The model id that needs to be edited
     * @param {module:model/Body3} body The model configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.editModel_0 = function(sid, body) {
      return this.editModel_0WithHttpInfo(sid, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.listModelsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.listModels = function() {
      return this.listModelsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.listModels_0WithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/service', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return models owned
     * Return list of models owned by user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.listModels_0 = function() {
      return this.listModels_0WithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a model
     * Run an existing model
     * @param {String} sid The model id to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.runModelWithHttpInfo = function(sid) {
      var postBody = null;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling runModel");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/model/{sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Run a model
     * Run an existing model
     * @param {String} sid The model id to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.runModel = function(sid) {
      return this.runModelWithHttpInfo(sid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a model
     * Run an existing model
     * @param {String} sid The model id to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.runModel_0WithHttpInfo = function(sid) {
      var postBody = null;

      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling runModel_0");
      }


      var pathParams = {
        'sid': sid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/service/{sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Run a model
     * Run an existing model
     * @param {String} sid The model id to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.runModel_0 = function(sid) {
      return this.runModel_0WithHttpInfo(sid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));

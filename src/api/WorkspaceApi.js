/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body4', 'model/InlineResponse2003', 'model/InlineResponse2004'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body4'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'));
  } else {
    // Browser globals (root is window)
    if (!root.algorithmhub) {
      root.algorithmhub = {};
    }
    root.algorithmhub.WorkspaceApi = factory(root.algorithmhub.ApiClient, root.algorithmhub.Body4, root.algorithmhub.InlineResponse2003, root.algorithmhub.InlineResponse2004);
  }
}(this, function(ApiClient, Body4, InlineResponse2003, InlineResponse2004) {
  'use strict';

  /**
   * Workspace service.
   * @module api/WorkspaceApi
   * @version 0.3.0
   */

  /**
   * Constructs a new WorkspaceApi. 
   * @alias module:api/WorkspaceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cloneWorkspace operation.
     * @callback module:api/WorkspaceApi~cloneWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone workspace
     * Clone the given workspace
     * @param {String} wsid The workspace base type.
     * @param {module:api/WorkspaceApi~cloneWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.cloneWorkspace = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling cloneWorkspace");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wsid}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkspace operation.
     * @callback module:api/WorkspaceApi~createWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new workspace
     * Creates a new workspace
     * @param {module:model/Body4} body The workspace type
     * @param {module:api/WorkspaceApi~createWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createWorkspace = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWorkspace");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkspace operation.
     * @callback module:api/WorkspaceApi~deleteWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing workspace
     * Delete an existing workspace
     * @param {String} wsid The workspace id
     * @param {module:api/WorkspaceApi~deleteWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteWorkspace = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling deleteWorkspace");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wsid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the detailWorkspace operation.
     * @callback module:api/WorkspaceApi~detailWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets workspace metadata
     * Gets workspace metadata
     * @param {String} wsid The workspace id
     * @param {module:api/WorkspaceApi~detailWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.detailWorkspace = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling detailWorkspace");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/workspace/{wsid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listServices operation.
     * @callback module:api/WorkspaceApi~listServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get models associated
     * Get models associated with an exsisting workspace
     * @param {String} wsid The workspace base type.
     * @param {module:api/WorkspaceApi~listServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004>}
     */
    this.listServices = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling listServices");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse2004];

      return this.apiClient.callApi(
        '/workspace/{wsid}/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listServices_0 operation.
     * @callback module:api/WorkspaceApi~listServices_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get models associated
     * Get models associated with an exsisting workspace
     * @param {String} wsid The workspace base type.
     * @param {module:api/WorkspaceApi~listServices_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004>}
     */
    this.listServices_0 = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling listServices_0");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse2004];

      return this.apiClient.callApi(
        '/workspace/{wsid}/service', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkspaces operation.
     * @callback module:api/WorkspaceApi~listWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2003>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of workspaces
     * Returns a list of workspaces
     * @param {module:api/WorkspaceApi~listWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2003>}
     */
    this.listWorkspaces = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse2003];

      return this.apiClient.callApi(
        '/workspace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publishWorkspace operation.
     * @callback module:api/WorkspaceApi~publishWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish workspace to repo
     * Publish current workspace to repo
     * @param {String} wsid The workspace base type.
     * @param {module:api/WorkspaceApi~publishWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.publishWorkspace = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling publishWorkspace");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wsid}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareWorkspace operation.
     * @callback module:api/WorkspaceApi~shareWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share workspace with another user
     * Share workspace with another user
     * @param {String} wsid The workspace base type.
     * @param {module:api/WorkspaceApi~shareWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.shareWorkspace = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling shareWorkspace");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wsid}/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the turnOffWorkspace operation.
     * @callback module:api/WorkspaceApi~turnOffWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turn off the workspace
     * Turn off the workspace
     * @param {String} wsid The workspace base type.
     * @param {module:api/WorkspaceApi~turnOffWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.turnOffWorkspace = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling turnOffWorkspace");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wsid}/off', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the turnOnWorkspace operation.
     * @callback module:api/WorkspaceApi~turnOnWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turn on the workspace
     * Turn on the workspace
     * @param {String} wsid The workspace base type.
     * @param {module:api/WorkspaceApi~turnOnWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.turnOnWorkspace = function(wsid, callback) {
      var postBody = null;

      // verify the required parameter 'wsid' is set
      if (wsid === undefined || wsid === null) {
        throw new Error("Missing the required parameter 'wsid' when calling turnOnWorkspace");
      }


      var pathParams = {
        'wsid': wsid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wsid}/on', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

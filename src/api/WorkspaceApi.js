/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body2', 'model/InlineResponse20010', 'model/InlineResponse20011'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body2'), require('../model/InlineResponse20010'), require('../model/InlineResponse20011'));
  } else {
    // Browser globals (root is window)
    if (!root.algorithmhub) {
      root.algorithmhub = {};
    }
    root.algorithmhub.WorkspaceApi = factory(root.algorithmhub.ApiClient, root.algorithmhub.Body2, root.algorithmhub.InlineResponse20010, root.algorithmhub.InlineResponse20011);
  }
}(this, function(ApiClient, Body2, InlineResponse20010, InlineResponse20011) {
  'use strict';

  /**
   * Workspace service.
   * @module api/WorkspaceApi
   * @version 0.3.0
   */

  /**
   * Constructs a new WorkspaceApi. 
   * @alias module:api/WorkspaceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Clone the workspace
     * Clone the given workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.cloneWorkspaceWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling cloneWorkspace");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wmid}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Clone the workspace
     * Clone the given workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.cloneWorkspace = function(wmid) {
      return this.cloneWorkspaceWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates new workspace
     * Creates a new workspace
     * @param {module:model/Body2} body The workspace type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.createWorkspaceWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWorkspace");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates new workspace
     * Creates a new workspace
     * @param {module:model/Body2} body The workspace type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.createWorkspace = function(body) {
      return this.createWorkspaceWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing workspace
     * Delete an existing workspace
     * @param {String} wmid The workspace id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.deleteWorkspaceWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling deleteWorkspace");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wmid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing workspace
     * Delete an existing workspace
     * @param {String} wmid The workspace id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.deleteWorkspace = function(wmid) {
      return this.deleteWorkspaceWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets workspace metadata
     * Gets workspace metadata
     * @param {String} wmid The workspace id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    this.detailWorkspaceWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling detailWorkspace");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/workspace/{wmid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets workspace metadata
     * Gets workspace metadata
     * @param {String} wmid The workspace id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}
     */
    this.detailWorkspace = function(wmid) {
      return this.detailWorkspaceWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get models associated
     * Get models associated with an exsisting workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20011>} and HTTP response
     */
    this.listServicesWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling listServices");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse20011];

      return this.apiClient.callApi(
        '/workspace/{wmid}/model', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get models associated
     * Get models associated with an exsisting workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20011>}
     */
    this.listServices = function(wmid) {
      return this.listServicesWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get models associated
     * Get models associated with an exsisting workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20011>} and HTTP response
     */
    this.listServices_0WithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling listServices_0");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse20011];

      return this.apiClient.callApi(
        '/workspace/{wmid}/service', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get models associated
     * Get models associated with an exsisting workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20011>}
     */
    this.listServices_0 = function(wmid) {
      return this.listServices_0WithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of workspaces
     * Returns a list of workspaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20010>} and HTTP response
     */
    this.listWorkspacesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = [InlineResponse20010];

      return this.apiClient.callApi(
        '/workspace', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns list of workspaces
     * Returns a list of workspaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20010>}
     */
    this.listWorkspaces = function() {
      return this.listWorkspacesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Publish workspace to repo
     * Publish current workspace to repo
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.publishWorkspaceWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling publishWorkspace");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wmid}/publish', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Publish workspace to repo
     * Publish current workspace to repo
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.publishWorkspace = function(wmid) {
      return this.publishWorkspaceWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Share workspace with another user
     * Share workspace with another user
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.shareWorkspaceWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling shareWorkspace");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wmid}/share', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Share workspace with another user
     * Share workspace with another user
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.shareWorkspace = function(wmid) {
      return this.shareWorkspaceWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Turn off the workspace
     * Turn off the workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.turnOffWorkspaceWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling turnOffWorkspace");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wmid}/off', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Turn off the workspace
     * Turn off the workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.turnOffWorkspace = function(wmid) {
      return this.turnOffWorkspaceWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Turn on the workspace
     * Turn on the workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.turnOnWorkspaceWithHttpInfo = function(wmid) {
      var postBody = null;

      // verify the required parameter 'wmid' is set
      if (wmid === undefined || wmid === null) {
        throw new Error("Missing the required parameter 'wmid' when calling turnOnWorkspace");
      }


      var pathParams = {
        'wmid': wmid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/workspace/{wmid}/on', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Turn on the workspace
     * Turn on the workspace
     * @param {String} wmid The workspace base type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.turnOnWorkspace = function(wmid) {
      return this.turnOnWorkspaceWithHttpInfo(wmid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));

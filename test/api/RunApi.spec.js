/**
 * AlgorithmHub
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.algorithmhub);
  }
}(this, function(expect, algorithmhub) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new algorithmhub.RunApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RunApi', function() {
    describe('addFileRun', function() {
      it('should call addFileRun successfully', function(done) {
        //uncomment below and update the code to test addFileRun
        //instance.addFileRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detailRun', function() {
      it('should call detailRun successfully', function(done) {
        //uncomment below and update the code to test detailRun
        //instance.detailRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInput', function() {
      it('should call getInput successfully', function(done) {
        //uncomment below and update the code to test getInput
        //instance.getInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOutput', function() {
      it('should call getOutput successfully', function(done) {
        //uncomment below and update the code to test getOutput
        //instance.getOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOutputFigure', function() {
      it('should call getOutputFigure successfully', function(done) {
        //uncomment below and update the code to test getOutputFigure
        //instance.getOutputFigure(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOutputFile', function() {
      it('should call getOutputFile successfully', function(done) {
        //uncomment below and update the code to test getOutputFile
        //instance.getOutputFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatus', function() {
      it('should call getStatus successfully', function(done) {
        //uncomment below and update the code to test getStatus
        //instance.getStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOutputFigures', function() {
      it('should call listOutputFigures successfully', function(done) {
        //uncomment below and update the code to test listOutputFigures
        //instance.listOutputFigures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOutputFiles', function() {
      it('should call listOutputFiles successfully', function(done) {
        //uncomment below and update the code to test listOutputFiles
        //instance.listOutputFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRuns', function() {
      it('should call listRuns successfully', function(done) {
        //uncomment below and update the code to test listRuns
        //instance.listRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postError', function() {
      it('should call postError successfully', function(done) {
        //uncomment below and update the code to test postError
        //instance.postError(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postFigure', function() {
      it('should call postFigure successfully', function(done) {
        //uncomment below and update the code to test postFigure
        //instance.postFigure(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postStatus', function() {
      it('should call postStatus successfully', function(done) {
        //uncomment below and update the code to test postStatus
        //instance.postStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setSuccess', function() {
      it('should call setSuccess successfully', function(done) {
        //uncomment below and update the code to test setSuccess
        //instance.setSuccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
